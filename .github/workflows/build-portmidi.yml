name: Build PortMidi Library

on:
  push:
    paths:
      - 'Native/portmidi/**'
  workflow_dispatch:

jobs:
  build:
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        include:
          # Windows builds
          - os: windows-latest
            rid: win-x64
            platform: Windows
            arch: x64
            cmake_target_arch: x64
          - os: windows-latest
            rid: win-x86
            platform: Windows
            arch: x86
            cmake_target_arch: Win32
          - os: windows-latest
            rid: win-arm64
            platform: Windows
            arch: ARM64
            cmake_target_arch: ARM64

          # Linux builds
          - os: ubuntu-22.04
            rid: linux-x64
            platform: Linux
            arch: x86_64
          - os: ubuntu-22.04
            rid: linux-arm64
            platform: Linux
            arch: aarch64
          - os: ubuntu-22.04
            rid: linux-arm
            platform: Linux
            arch: arm

          # macOS builds
          - os: macos-latest
            rid: osx-x64
            platform: macOS
            arch: x86_64
          - os: macos-latest
            rid: osx-arm64
            platform: macOS
            arch: arm64

    name: Build for ${{ matrix.platform }} - ${{ matrix.arch }}

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          submodules: recursive

      - name: Install Dependencies (Linux)
        if: matrix.platform == 'Linux'
        run: |
          sudo apt-get update
          # Install build tools
          sudo apt-get install -y build-essential cmake file binutils
          # Install cross-compilers for ARM targets
          if [ "${{ matrix.arch }}" == "arm64" ]; then
            sudo apt-get install -y gcc-aarch64-linux-gnu g++-aarch64-linux-gnu
            # Install ALSA dev library for the target architecture
            sudo dpkg --add-architecture arm64
            sudo apt-get update
            sudo apt-get install -y libasound2-dev:arm64
          elif [ "${{ matrix.arch }}" == "arm" ]; then
            sudo apt-get install -y gcc-arm-linux-gnueabihf g++-arm-linux-gnueabihf
            # Install ALSA dev library for the target architecture
            sudo dpkg --add-architecture armhf
            sudo apt-get update
            sudo apt-get install -y libasound2-dev:armhf
          else
            # Install ALSA dev library for native architecture
            sudo apt-get install -y libasound2-dev
          fi

      - name: Configure CMake
        shell: bash
        working-directory: Native/portmidi
        run: |
          CMAKE_FLAGS="-DBUILD_SHARED_LIBS=ON -DBUILD_PORTMIDI_TESTS=OFF"
          
          if [ "${{ matrix.platform }}" == "Windows" ]; then
            cmake -S . -B build -G "Visual Studio 17 2022" -A ${{ matrix.cmake_target_arch }} $CMAKE_FLAGS
          elif [ "${{ matrix.platform }}" == "macOS" ]; then
            cmake -S . -B build -DCMAKE_BUILD_TYPE=Release -DCMAKE_OSX_ARCHITECTURES=${{ matrix.arch }} $CMAKE_FLAGS
          elif [ "${{ matrix.platform }}" == "Linux" ]; then
            if [ "${{ matrix.arch }}" == "arm64" ]; then
              CMAKE_FLAGS="$CMAKE_FLAGS -DCMAKE_SYSTEM_PROCESSOR=aarch64 -DCMAKE_C_COMPILER=aarch64-linux-gnu-gcc -DCMAKE_CXX_COMPILER=aarch64-linux-gnu-g++"
            elif [ "${{ matrix.arch }}" == "arm" ]; then
              CMAKE_FLAGS="$CMAKE_FLAGS -DCMAKE_SYSTEM_PROCESSOR=arm -DCMAKE_C_COMPILER=arm-linux-gnueabihf-gcc -DCMAKE_CXX_COMPILER=arm-linux-gnueabihf-g++"
            fi
            cmake -S . -B build -DCMAKE_BUILD_TYPE=Release $CMAKE_FLAGS
          fi

      - name: Build with CMake
        working-directory: Native/portmidi
        run: cmake --build build --config Release --parallel

      - name: Prepare Artifact Directory
        run: mkdir -p runtimes/${{ matrix.rid }}/native

      - name: Copy Library for Artifact
        shell: bash
        run: |
          if [ "${{ matrix.platform }}" == "Windows" ]; then
            cp "Native/portmidi/build/Release/portmidi.dll" "runtimes/${{ matrix.rid }}/native/"
          elif [ "${{ matrix.platform }}" == "macOS" ]; then
            cp "Native/portmidi/build/libportmidi.dylib" "runtimes/${{ matrix.rid }}/native/"
          else
            cp "Native/portmidi/build/libportmidi.so" "runtimes/${{ matrix.rid }}/native/"
          fi

      - name: Analyze Dependencies
        shell: bash
        run: |
          echo "--- Analyzing Dependencies for ${{ matrix.rid }} ---"
          LIB_PATH_BASE="runtimes/${{ matrix.rid }}/native"
          if [ "${{ matrix.platform }}" == "Windows" ]; then
            dumpbin /DEPENDENTS "$LIB_PATH_BASE/portmidi.dll"
          elif [ "${{ matrix.platform }}" == "macOS" ]; then
            otool -L "$LIB_PATH_BASE/libportmidi.dylib"
          elif [ "${{ matrix.platform }}" == "Linux" ]; then
            if [ "${{ matrix.arch }}" == "x86_64" ]; then
              ldd "$LIB_PATH_BASE/libportmidi.so"
            else
              readelf -d "$LIB_PATH_BASE/libportmidi.so" | grep "NEEDED"
            fi
          fi

      - name: Upload Artifact
        uses: actions/upload-artifact@v4
        with:
          name: ${{ matrix.rid }}
          path: runtimes/${{ matrix.rid }}

  build-freebsd:
    name: Build for FreeBSD - ${{ matrix.arch }}
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        include:
          - arch: x64
            vm_arch: x86_64
          - arch: arm64
            vm_arch: aarch64
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          submodules: recursive

      - name: Build in FreeBSD VM
        uses: vmactions/freebsd-vm@v1
        with:
          release: "14.0"
          arch: ${{ matrix.vm_arch }}
          usesh: true
          prepare: |
            pkg install -y cmake gmake
          run: |
            set -ex # Exit on error and print commands
            cd $GITHUB_WORKSPACE/Native/portmidi
            mkdir build
            cmake -S . -B build -DCMAKE_BUILD_TYPE=Release -DBUILD_SHARED_LIBS=ON -DBUILD_PORTMIDI_TESTS=OFF
            cmake --build build --config Release --parallel

      - name: Prepare Artifact Directory
        run: mkdir -p runtimes/freebsd-${{ matrix.arch }}/native

      - name: Copy Library for Artifact
        run: cp "Native/portmidi/build/libportmidi.so" "runtimes/freebsd-${{ matrix.arch }}/native/"

      - name: Upload Artifact
        uses: actions/upload-artifact@v4
        with:
          name: freebsd-${{ matrix.arch }}
          path: runtimes/freebsd-${{ matrix.arch }}

  package:
    name: Package all PortMidi artifacts
    runs-on: ubuntu-latest
    needs: [build, build-freebsd]
    steps:
      - name: Download all build artifacts
        uses: actions/download-artifact@v4
        with:
          path: artifacts/

      - name: Reorganize and Package
        run: |
          mkdir runtimes
          # The downloaded artifacts are folders named by RID, so we can copy them directly
          cp -r artifacts/*/* runtimes/
          echo "Final package structure:"
          ls -R runtimes
          zip -r portmidi-native-libraries.zip runtimes

      - name: Upload final package
        uses: actions/upload-artifact@v4
        with:
          name: portmidi-native-libraries
          path: portmidi-native-libraries.zip