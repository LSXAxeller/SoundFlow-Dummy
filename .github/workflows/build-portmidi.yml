name: Build PortMidi Library

on:
  push:
    paths:
      - 'Native/portmidi/**'
  workflow_dispatch:

jobs:
  build:
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        include:
          # Windows builds
          - os: windows-latest
            rid: win-x64
            platform: Windows
            arch: x64
            cmake_target_arch: x64
          - os: windows-latest
            rid: win-x86
            platform: Windows
            arch: x86
            cmake_target_arch: Win32
          - os: windows-latest
            rid: win-arm64
            platform: Windows
            arch: ARM64
            cmake_target_arch: ARM64

          # Linux builds
          - os: ubuntu-22.04
            rid: linux-x64
            platform: Linux
            arch: x86_64
          - os: ubuntu-22.04
            rid: linux-arm64
            platform: Linux
            arch: aarch64
          - os: ubuntu-22.04
            rid: linux-arm
            platform: Linux
            arch: arm

          # macOS builds
          - os: macos-latest
            rid: osx-x64
            platform: macOS
            arch: x86_64
          - os: macos-latest
            rid: osx-arm64
            platform: macOS
            arch: arm64

    name: Build for ${{ matrix.platform }} - ${{ matrix.arch }}

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          submodules: recursive

      - name: Install Dependencies (Linux)
        if: runner.os == 'Linux'
        run: |
          sudo apt-get update
          sudo apt-get install -y build-essential cmake file binutils lsb-release
          
          # For native x86_64 build only
          if [ "${{ matrix.arch }}" == "x86_64" ]; then
            sudo apt-get install -y libasound2-dev
          fi

      - name: Build ARM libraries with Docker
        if: runner.os == 'Linux' && (matrix.arch == 'aarch64' || matrix.arch == 'arm')
        run: |
          # Determine the Docker image based on architecture
          if [ "${{ matrix.arch }}" == "aarch64" ]; then
            DOCKER_IMAGE="arm64v8/ubuntu:22.04"
          elif [ "${{ matrix.arch }}" == "arm" ]; then
            DOCKER_IMAGE="arm32v7/ubuntu:22.04"
          fi
          
          docker run --rm -v $PWD:/workspace $DOCKER_IMAGE /bin/bash -c "
            # Update and install dependencies
            apt-get update
            apt-get install -y build-essential cmake libasound2-dev
          
            # Build PortMidi
            cd /workspace/Native/portmidi
            cmake -S . -B build \
              -DCMAKE_BUILD_TYPE=Release \
              -DBUILD_SHARED_LIBS=ON \
              -DBUILD_PORTMIDI_TESTS=OFF
            cmake --build build --config Release --parallel
          "
          
          # Copy the built library to the artifact directory
          mkdir -p runtimes/${{ matrix.rid }}/native
          cp Native/portmidi/build/libportmidi.so runtimes/${{ matrix.rid }}/native/

      - name: Configure and Build Native (Non-ARM Linux)
        if: runner.os == 'Linux' && matrix.arch == 'x86_64'
        shell: bash
        working-directory: Native/portmidi
        run: |
          cmake -S . -B build \
            -DCMAKE_BUILD_TYPE=Release \
            -DBUILD_SHARED_LIBS=ON \
            -DBUILD_PORTMIDI_TESTS=OFF
          cmake --build build --config Release --parallel
          
          mkdir -p ../../runtimes/${{ matrix.rid }}/native
          cp build/libportmidi.so ../../runtimes/${{ matrix.rid }}/native/

      - name: Configure and Build (Windows)
        if: runner.os == 'Windows'
        shell: bash
        working-directory: Native/portmidi
        run: |
          cmake -S . -B build \
            -G "Visual Studio 17 2022" \
            -A ${{ matrix.cmake_target_arch }} \
            -DBUILD_SHARED_LIBS=ON \
            -DBUILD_PORTMIDI_TESTS=OFF
          cmake --build build --config Release --parallel
          
          mkdir -p ../../runtimes/${{ matrix.rid }}/native
          cp build/Release/portmidi.dll ../../runtimes/${{ matrix.rid }}/native/

      - name: Configure and Build (macOS)
        if: runner.os == 'macOS'
        shell: bash
        working-directory: Native/portmidi
        run: |
          cmake -S . -B build \
            -DCMAKE_BUILD_TYPE=Release \
            -DCMAKE_OSX_ARCHITECTURES=${{ matrix.arch }} \
            -DBUILD_SHARED_LIBS=ON \
            -DBUILD_PORTMIDI_TESTS=OFF
          cmake --build build --config Release --parallel
          
          mkdir -p ../../runtimes/${{ matrix.rid }}/native
          cp build/libportmidi.dylib ../../runtimes/${{ matrix.rid }}/native/

      - name: Setup MSVC developer environment (Windows)
        if: runner.os == 'Windows'
        uses: ilammy/msvc-dev-cmd@v1
        with:
          arch: ${{ matrix.arch }}

      - name: Analyze Dependencies (Windows)
        if: runner.os == 'Windows' && matrix.arch != 'ARM64'
        run: |
          echo "--- Analyzing Dependencies for ${{ matrix.rid }} ---"
          dumpbin /DEPENDENTS runtimes/${{ matrix.rid }}/native/portmidi.dll

      - name: Analyze Dependencies (macOS)
        if: runner.os == 'macOS'
        run: |
          echo "--- Analyzing Dependencies for ${{ matrix.rid }} ---"
          otool -L runtimes/${{ matrix.rid }}/native/libportmidi.dylib

      - name: Analyze Dependencies (Linux x86_64)
        if: runner.os == 'Linux' && matrix.arch == 'x86_64'
        shell: bash
        run: |
          echo "--- Analyzing Dependencies for ${{ matrix.rid }} ---"
          ldd "runtimes/${{ matrix.rid }}/native/libportmidi.so"

      - name: Analyze Dependencies (Linux ARM)
        if: runner.os == 'Linux' && (matrix.arch == 'aarch64' || matrix.arch == 'arm')
        shell: bash
        run: |
          echo "--- Analyzing Dependencies for ${{ matrix.rid }} ---"
          # For cross-compiled binaries, use readelf instead of ldd
          readelf -d "runtimes/${{ matrix.rid }}/native/libportmidi.so" | grep "NEEDED"

      - name: Upload Artifact
        uses: actions/upload-artifact@v4
        with:
          name: ${{ matrix.rid }}
          path: runtimes/${{ matrix.rid }}

  build-freebsd:
    name: Build for FreeBSD - ${{ matrix.arch }}
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        include:
          - arch: x64
            vm_arch: x86_64
            release: "14.0"
          - arch: arm64
            vm_arch: aarch64
            release: "14.1"
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          submodules: recursive

      - name: Build and Prepare Artifact in FreeBSD VM
        uses: vmactions/freebsd-vm@v1
        with:
          release: ${{ matrix.release }}
          arch: ${{ matrix.vm_arch }}
          usesh: true
          prepare: |
            pkg install -y cmake gmake alsa-lib
          run: |
            set -ex # Exit on error and print commands
            
            # Build the library 
            cd $GITHUB_WORKSPACE/Native/portmidi
            cmake -S . -B build -DCMAKE_BUILD_TYPE=Release -DBUILD_SHARED_LIBS=ON -DBUILD_PORTMIDI_TESTS=OFF
            cmake --build build --config Release --parallel
            
            # Prepare artifact directory and copy the library (inside the VM)
            ARTIFACT_DIR="$GITHUB_WORKSPACE/runtimes/freebsd-${{ matrix.arch }}/native"
            mkdir -p "$ARTIFACT_DIR"
            cp "$GITHUB_WORKSPACE/Native/portmidi/build/libportmidi.so" "$ARTIFACT_DIR/"

      - name: Upload Artifact
        uses: actions/upload-artifact@v4
        with:
          name: freebsd-${{ matrix.arch }}
          path: runtimes/freebsd-${{ matrix.arch }}

  package:
    name: Package all PortMidi artifacts
    runs-on: ubuntu-latest
    needs: [build, build-freebsd]
    steps:
      - name: Download all build artifacts
        uses: actions/download-artifact@v4
        with:
          path: artifacts/

      - name: Reorganize and Package
        run: |
          mkdir runtimes
          for dir in artifacts/*; do
            # Get the RID from the directory name (e.g., "win-x64")
            rid=$(basename "$dir")
            echo "Processing artifact for RID: $rid"
          
            target_dir="runtimes/$rid"
            mkdir -p "$target_dir"
            mv "$dir"/* "$target_dir/"
          done
          
          echo "Final package structure:"
          ls -R runtimes
          zip -r portmidi-native-libraries.zip runtimes

      - name: Upload final package
        uses: actions/upload-artifact@v4
        with:
          name: portmidi-native-libraries
          path: portmidi-native-libraries.zip