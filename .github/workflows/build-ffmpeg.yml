name: Build FFmpeg Codec Integration

on:
  workflow_dispatch:
  push:
    paths:
      - 'Native/ffmpeg-codec/**'

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

jobs:
  build:
    name: Build for ${{ matrix.rid }}
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        include:
          # --- Windows (MinGW) ---
          - platform: windows
            os: windows-latest
            rid: win-x64
            arch: x64
            msystem: MINGW64
            mingw_pkg_prefix: mingw-w64-x86_64
          - platform: windows
            os: windows-latest
            rid: win-x86
            arch: x86
            msystem: MINGW32
            mingw_pkg_prefix: mingw-w64-i686
          - platform: windows
            os: windows-11-arm
            rid: win-arm64
            arch: arm64
            msystem: CLANGARM64
            mingw_pkg_prefix: mingw-w64-clang-aarch64

          # --- Linux (GCC, cross-compiling for ARM) ---
          - platform: linux
            os: ubuntu-22.04
            rid: linux-x64
            arch: x64
            cmake_opts: -DCMAKE_SYSTEM_PROCESSOR=x86_64
            toolchain_pkgs: ""
          - platform: linux
            os: ubuntu-22.04
            rid: linux-arm64
            arch: arm64
            cmake_opts: -DCMAKE_C_COMPILER=aarch64-linux-gnu-gcc -DCMAKE_CXX_COMPILER=aarch64-linux-gnu-g++
            toolchain_pkgs: gcc-aarch64-linux-gnu g++-aarch64-linux-gnu
          - platform: linux
            os: ubuntu-22.04
            rid: linux-arm
            arch: arm
            cmake_opts: -DCMAKE_C_COMPILER=arm-linux-gnueabihf-gcc -DCMAKE_CXX_COMPILER=arm-linux-gnueabihf-g++
            toolchain_pkgs: gcc-arm-linux-gnueabihf g++-arm-linux-gnueabihf

          # --- macOS (Clang) ---
          - platform: macos
            os: macos-13
            rid: osx-x64
            arch: x86_64
          - platform: macos
            os: macos-14
            rid: osx-arm64
            arch: arm64

          # --- Android (NDK/Clang) ---
          - platform: android
            os: ubuntu-22.04
            rid: android-x64
            abi: x86_64
          - platform: android
            os: ubuntu-22.04
            rid: android-arm
            abi: armeabi-v7a
          - platform: android
            os: ubuntu-22.04
            rid: android-arm64
            abi: arm64-v8a

          # --- iOS (Clang) ---
          - platform: ios
            os: macos-latest
            rid: ios-arm64
            arch: arm64

    defaults:
      run:
        working-directory: Native/ffmpeg-codec

    steps:
      - uses: actions/checkout@v4

      - name: Setup MSYS2 (Windows)
        if: matrix.platform == 'windows'
        uses: msys2/setup-msys2@v2
        with:
          msystem: ${{ matrix.msystem }}
          update: true
          install: >-
            base-devel git nasm yasm
            ${{ matrix.mingw_pkg_prefix }}-gcc
            ${{ matrix.mingw_pkg_prefix }}-cmake
            ${{ matrix.mingw_pkg_prefix }}-make
            ${{ matrix.mingw_pkg_prefix }}-pkg-config

      - name: Setup Android NDK
        if: matrix.platform == 'android'
        uses: nttld/setup-ndk@v1
        id: setup-ndk
        with:
          ndk-version: r26b

      - name: Install Dependencies (Linux & Android)
        if: matrix.platform == 'linux' || matrix.platform == 'android'
        run: |
          sudo apt-get update
          sudo apt-get install -y build-essential cmake nasm yasm pkg-config ${{ matrix.toolchain_pkgs }}

      - name: Install Dependencies (macOS & iOS)
        if: matrix.platform == 'macos' || matrix.platform == 'ios'
        run: brew install cmake nasm yasm pkg-config

      - name: Configure and Build
        shell: ${{ runner.os == 'Windows' ? 'msys2 {0}' : 'bash' }}
        env:
          ANDROID_NDK_ROOT: ${{ steps.setup-ndk.outputs.ndk-path }}
        run: |
          set -e # Exit immediately if any command fails.
          CMAKE_ARGS=""
          if [[ "${{ matrix.platform }}" == "windows" ]]; then
            CMAKE_ARGS="-G \"MinGW Makefiles\" -DCMAKE_SYSTEM_PROCESSOR=${{ matrix.arch }}"
          elif [[ "${{ matrix.platform }}" == "linux" ]]; then
            CMAKE_ARGS="${{ matrix.cmake_opts }}"
          elif [[ "${{ matrix.platform }}" == "macos" ]]; then
            CMAKE_ARGS="-DCMAKE_OSX_ARCHITECTURES=${{ matrix.arch }}"
          elif [[ "${{ matrix.platform }}" == "android" ]]; then
            CMAKE_ARGS="-DCMAKE_TOOLCHAIN_FILE=$ANDROID_NDK_ROOT/build/cmake/android.toolchain.cmake -DANDROID_ABI=${{ matrix.abi }} -DANDROID_PLATFORM=21"
          elif [[ "${{ matrix.platform }}" == "ios" ]]; then
            CMAKE_ARGS="-DCMAKE_SYSTEM_NAME=iOS -DCMAKE_OSX_ARCHITECTURES=${{ matrix.arch }} -DCMAKE_OSX_DEPLOYMENT_TARGET=11.0"
          fi
          cmake -S . -B build -DCMAKE_BUILD_TYPE=Release $CMAKE_ARGS
          cmake --build build --parallel --verbose

      - name: Analyze Binary
        shell: ${{ runner.os == 'Windows' ? 'msys2 {0}' : 'bash' }}
        env:
          ANDROID_NDK_ROOT: ${{ steps.setup-ndk.outputs.ndk-path }}
        run: |
          # Setup Path 
          ARTIFACT_DIR="build/runtimes/${{ matrix.rid }}/native"
          LIB_BASE_NAME="soundflow-ffmpeg"
          LIB_PATH=""
          if [[ "${{ runner.os }}" == "Windows" ]]; then
            LIB_PATH="$ARTIFACT_DIR/$LIB_BASE_NAME.dll"
          elif [[ "${{ runner.os }}" == "macOS" ]]; then
            LIB_PATH="$ARTIFACT_DIR/lib$LIB_BASE_NAME.dylib"
          else # Linux, Android
            LIB_PATH="$ARTIFACT_DIR/lib$LIB_BASE_NAME.so"
          fi
          if [[ ! -f "$LIB_PATH" ]]; then
            echo "::error::Expected library not found at: $LIB_PATH"
            exit 1
          fi

          # Analyze Architecture
          echo "=========================================="
          echo "Analyzing Architecture for ${{ matrix.rid }}"
          echo "=========================================="
          file "$LIB_PATH"

          # --- Analyze Dependencies ---
          echo -e "\n=========================================="
          echo "Analyzing Dependencies for ${{ matrix.rid }}"
          echo "=========================================="
          if [[ "${{ runner.os }}" == "Windows" ]]; then
            objdump -p "$LIB_PATH" | grep "DLL Name:" || echo "No DLL dependencies found."
          elif [[ "${{ runner.os }}" == "macOS" ]]; then
            otool -L "$LIB_PATH"
          elif [[ "${{ matrix.platform }}" == "android" ]]; then
            "$ANDROID_NDK_ROOT/toolchains/llvm/prebuilt/linux-x86_64/bin/llvm-readelf" -d "$LIB_PATH" | grep "NEEDED" || echo "No dependencies found."
          elif [[ "${{ matrix.rid }}" == "linux-x64" ]]; then
            ldd "$LIB_PATH" || echo "ldd failed."
          else # Cross-compiled Linux
            readelf -d "$LIB_PATH" | grep "NEEDED" || echo "No dependencies found."
          fi

      - name: Upload Artifacts
        uses: actions/upload-artifact@v4
        with:
          name: soundflow-ffmpeg-${{ matrix.rid }}
          path: Native/ffmpeg-codec/build/runtimes/${{ matrix.rid }}/native/*

  build-freebsd:
    name: Build for freebsd-${{ matrix.arch }}
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        include:
          - arch: x64
            vm_arch: x86_64
          - arch: arm64
            vm_arch: aarch64
    steps:
      - uses: actions/checkout@v4

      - name: Build and Analyze in FreeBSD VM
        uses: cross-platform-actions/action@v0.26.0
        with:
          operating_system: freebsd
          version: '14.0'
          architecture: ${{ matrix.vm_arch }}
          run: |
            set -ex
            # Setup
            sudo pkg install -y cmake gmake nasm yasm pkgconf bash
            cd Native/ffmpeg-codec

            # Build 
            echo "--- Starting build for freebsd-${{ matrix.arch }} ---"
            cmake -S . -B build -DCMAKE_BUILD_TYPE=Release -DCMAKE_MAKE_PROGRAM=gmake
            cmake --build build --parallel --verbose
            
            # Analysis
            LIB_PATH="build/runtimes/freebsd-${{ matrix.arch }}/native/libsoundflow-ffmpeg.so"
            if [[ ! -f "$LIB_PATH" ]]; then
              echo "::error::Expected library not found at: $LIB_PATH"
              exit 1
            fi

            echo "=========================================="
            echo "Analyzing Architecture for freebsd-${{ matrix.arch }}"
            echo "=========================================="
            file "$LIB_PATH"

            echo -e "\n=========================================="
            echo "Analyzing Dependencies for freebsd-${{ matrix.arch }}"
            echo "=========================================="
            ldd "$LIB_PATH"

      - name: Upload Artifacts
        uses: actions/upload-artifact@v4
        with:
          name: soundflow-ffmpeg-freebsd-${{ matrix.arch }}
          path: Native/ffmpeg-codec/build/runtimes/freebsd-${{ matrix.arch }}/native/*

  package:
    name: Package All Artifacts
    runs-on: ubuntu-latest
    needs: [build, build-freebsd]
    steps:
      - name: Download all build artifacts
        uses: actions/download-artifact@v4
        with:
          path: artifacts/
          pattern: soundflow-ffmpeg-*
          merge-multiple: true

      - name: Reorganize and Package
        run: |
          mkdir runtimes
          for artifact_dir in artifacts/*; do
            artifact_name=$(basename "$artifact_dir")
            rid="${artifact_name#soundflow-ffmpeg-}"

            echo "Processing artifact for RID: $rid"
            target_dir="runtimes/$rid/native"
            mkdir -p "$target_dir"
            mv "$artifact_dir"/* "$target_dir/"
          done

          echo "Final package structure:"
          ls -R runtimes
          zip -r soundflow-ffmpeg-runtimes.zip runtimes

      - name: Upload Final Package
        uses: actions/upload-artifact@v4
        with:
          name: soundflow-ffmpeg-runtimes
          path: soundflow-ffmpeg-runtimes.zip