name: Build WASM Library

on:
  push:
    paths:
      - 'Native/**'
      - '.github/workflows/build-wasm.yml'

jobs:
  build:
    runs-on: ubuntu-latest
    
    strategy:
      fail-fast: false
      matrix:
        include:
          - rid: wasm-browser
            platform: WASM

    name: Build for ${{ matrix.platform }}

    steps:
      # 1. Check out the repository and its submodules
      - uses: actions/checkout@v4
        with:
          submodules: recursive

      # 2. Install the Emscripten SDK
      - name: Setup Emscripten
        uses: mymindstorm/setup-emsdk@v14
        with:
          version: '4.0.11'

      # 3. Configure CMake using the Emscripten toolchain
      - name: Configure CMake
        shell: bash
        working-directory: ${{ github.workspace }}/Native
        run: |
          emcmake cmake -B build -DCMAKE_BUILD_TYPE=Release

      # 4. Build the static library
      - name: Build Library
        shell: bash
        working-directory: ${{ github.workspace }}/Native/build
        run: cmake --build . --config Release
      
      # 5. Link the static library into a WASM module
      - name: Link WASM Module
        shell: bash
        working-directory: ${{ github.workspace }}/Native/build
        run: |
          emcc -o libminiaudio.js *.a \
            -sMODULARIZE=1 \
            -sEXPORT_ES6=1 \
            -sEXPORTED_RUNTIME_METHODS=['ccall','cwrap']

      # 6. List all outputs in the build directory for debugging
      - name: List Build Outputs
        shell: bash
        working-directory: ${{ github.workspace }}/Native/build
        run: |
          echo "Listing contents of ${{ github.workspace }}/Native/build/:"
          ls -la

      # 7. Create the output directory for the artifact
      - name: Create Output Directory
        shell: bash
        run: mkdir -p runtimes/${{ matrix.rid }}/native

      # 8. Copy the compiled WASM and JavaScript glue files
      - name: Copy WASM Artifacts
        shell: bash
        run: |
          find "${{ github.workspace }}/Native/build/" -maxdepth 1 -type f -exec cp {} "runtimes/${{ matrix.rid }}/native/" \;

      # 9. Upload the artifact for this specific build
      - name: Upload Artifact
        uses: actions/upload-artifact@v4
        with:
          name: ${{ matrix.rid }}
          path: runtimes/${{ matrix.rid }}/

  package:
    needs: build
    runs-on: ubuntu-latest
    steps:
      # 1. Download the artifact created by the build job.
      - name: Download all artifacts
        uses: actions/download-artifact@v4
        with:
          path: artifacts

      # 2. Package all downloaded artifacts into a single zip file.
      - name: Create final package
        run: |
          mkdir -p runtimes
          cp -r artifacts/*/* runtimes/
          zip -r wasm-library.zip runtimes

      # 3. Upload the final combined package.
      - name: Upload final package
        uses: actions/upload-artifact@v4
        with:
          name: wasm-library
          path: wasm-library.zip